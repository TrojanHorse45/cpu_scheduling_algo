#include <stdio.h>
#include <stdlib.h>

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int at[n], wt[n], bt[n], rem_bt[n], tat[n], ct[n];

    // Input arrival time and burst time for each process
    for (int i = 0; i < n; i++) {
        printf("Enter the arrival time and burst time for process %d: ", i + 1);
        scanf("%d %d", &at[i], &bt[i]);
        rem_bt[i] = bt[i];   // Initialize remaining burst time as burst time
        wt[i] = ct[i] = tat[i] = 0;
    }

    int tq;
    printf("Enter the time quantum: ");
    scanf("%d", &tq);

    int completed = 0, time = 0;

    // Process loop
    while (completed != n) {
        int done = 1;

        for (int i = 0; i < n; i++) {
            // Check if process has arrived and has remaining burst time
            if (time >= at[i] && rem_bt[i] > 0) {
                done = 0;  // A process is found for this time quantum

                if (rem_bt[i] > tq) {
                    time += tq;       // Increment time by time quantum
                    rem_bt[i] -= tq;  // Reduce remaining burst time
                } else {
                    time += rem_bt[i];    // Add remaining time to current time
                    rem_bt[i] = 0;        // Process is completed
                    ct[i] = time;         // Completion time
                    tat[i] = ct[i] - at[i]; // Turnaround time
                    wt[i] = tat[i] - bt[i]; // Waiting time
                    completed++;           // Increment completed count
                }
            }
        }

        if (done == 1) {
            time++;  // Increment time if no process was ready
        }
    }

    // Output results
    printf("Process\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, at[i], bt[i], ct[i], tat[i], wt[i]);
    }

    return 0;
}
